import { EventEmitter } from 'events';
import { P2PConfig, P2PDiscoveredPeerInfo, P2PMessagePacket, P2PNodeInfo, P2PPenalty, P2PRequestPacket, P2PResponsePacket } from './p2p_types';
import { P2PRequest } from './p2p_request';
export { P2PRequest };
import { EVENT_BAN_PEER, EVENT_CLOSE_INBOUND, EVENT_CLOSE_OUTBOUND, EVENT_CONNECT_ABORT_OUTBOUND, EVENT_CONNECT_OUTBOUND, EVENT_DISCOVERED_PEER, EVENT_FAILED_PEER_INFO_UPDATE, EVENT_FAILED_TO_COLLECT_PEER_DETAILS_ON_CONNECT, EVENT_FAILED_TO_FETCH_PEER_INFO, EVENT_FAILED_TO_PUSH_NODE_INFO, EVENT_FAILED_TO_SEND_MESSAGE, EVENT_INBOUND_SOCKET_ERROR, EVENT_MESSAGE_RECEIVED, EVENT_OUTBOUND_SOCKET_ERROR, EVENT_REMOVE_PEER, EVENT_REQUEST_RECEIVED, EVENT_UNBAN_PEER, EVENT_UPDATED_PEER_INFO } from './peer_pool';
export { EVENT_CLOSE_INBOUND, EVENT_CLOSE_OUTBOUND, EVENT_CONNECT_ABORT_OUTBOUND, EVENT_CONNECT_OUTBOUND, EVENT_DISCOVERED_PEER, EVENT_FAILED_TO_PUSH_NODE_INFO, EVENT_FAILED_TO_SEND_MESSAGE, EVENT_REMOVE_PEER, EVENT_REQUEST_RECEIVED, EVENT_MESSAGE_RECEIVED, EVENT_OUTBOUND_SOCKET_ERROR, EVENT_INBOUND_SOCKET_ERROR, EVENT_UPDATED_PEER_INFO, EVENT_FAILED_PEER_INFO_UPDATE, EVENT_FAILED_TO_COLLECT_PEER_DETAILS_ON_CONNECT, EVENT_FAILED_TO_FETCH_PEER_INFO, EVENT_BAN_PEER, EVENT_UNBAN_PEER, };
export declare const EVENT_NEW_INBOUND_PEER = "newInboundPeer";
export declare const EVENT_FAILED_TO_ADD_INBOUND_PEER = "failedToAddInboundPeer";
export declare const EVENT_NEW_PEER = "newPeer";
export declare const EVENT_NETWORK_READY = "networkReady";
export declare const DEFAULT_NODE_HOST_IP = "0.0.0.0";
export declare const DEFAULT_DISCOVERY_INTERVAL = 30000;
export declare const DEFAULT_BAN_TIME = 86400;
export declare const DEFAULT_POPULATOR_INTERVAL = 10000;
export declare const DEFAULT_SEND_PEER_LIMIT = 24;
export declare const DEFAULT_WS_MAX_MESSAGE_RATE = 100;
export declare const DEFAULT_WS_MAX_MESSAGE_RATE_PENALTY = 100;
export declare const DEFAULT_RATE_CALCULATION_INTERVAL = 1000;
export declare const DEFAULT_WS_MAX_PAYLOAD = 3048576;
export declare const DEFAULT_MAX_OUTBOUND_CONNECTIONS = 20;
export declare const DEFAULT_MAX_INBOUND_CONNECTIONS = 100;
export declare const DEFAULT_OUTBOUND_SHUFFLE_INTERVAL = 300000;
export declare const DEFAULT_PEER_PROTECTION_FOR_NETGROUP = 0.034;
export declare const DEFAULT_PEER_PROTECTION_FOR_LATENCY = 0.068;
export declare const DEFAULT_PEER_PROTECTION_FOR_USEFULNESS = 0.068;
export declare const DEFAULT_PEER_PROTECTION_FOR_LONGEVITY = 0.5;
export declare const DEFAULT_MIN_PEER_DISCOVERY_THRESHOLD = 100;
export declare const DEFAULT_MAX_PEER_DISCOVERY_RESPONSE_LENGTH = 1000;
export declare const DEFAULT_MAX_PEER_INFO_SIZE = 20480;
export declare const DEFAULT_RANDOM_SECRET: number;
export declare class P2P extends EventEmitter {
    private readonly _config;
    private readonly _sanitizedPeerLists;
    private readonly _httpServer;
    private _isActive;
    private _hasConnected;
    private readonly _peerBook;
    private readonly _bannedPeers;
    private readonly _populatorInterval;
    private _populatorIntervalId;
    private _nodeInfo;
    private readonly _peerPool;
    private readonly _scServer;
    private readonly _handlePeerPoolRPC;
    private readonly _handlePeerPoolMessage;
    private readonly _handleDiscoveredPeer;
    private readonly _handleFailedToPushNodeInfo;
    private readonly _handleFailedToSendMessage;
    private readonly _handleOutboundPeerConnect;
    private readonly _handleOutboundPeerConnectAbort;
    private readonly _handlePeerCloseOutbound;
    private readonly _handlePeerCloseInbound;
    private readonly _handleRemovePeer;
    private readonly _handlePeerInfoUpdate;
    private readonly _handleFailedToFetchPeerInfo;
    private readonly _handleFailedToFetchPeers;
    private readonly _handleFailedPeerInfoUpdate;
    private readonly _handleFailedToCollectPeerDetails;
    private readonly _handleBanPeer;
    private readonly _handleUnbanPeer;
    private readonly _handleOutboundSocketError;
    private readonly _handleInboundSocketError;
    private readonly _peerHandshakeCheck;
    constructor(config: P2PConfig);
    readonly config: P2PConfig;
    readonly isActive: boolean;
    applyNodeInfo(nodeInfo: P2PNodeInfo): void;
    readonly nodeInfo: P2PNodeInfo;
    applyPenalty(peerPenalty: P2PPenalty): void;
    getConnectedPeers(): ReadonlyArray<P2PDiscoveredPeerInfo>;
    getUniqueOutboundConnectedPeers(): ReadonlyArray<P2PDiscoveredPeerInfo>;
    getDisconnectedPeers(): ReadonlyArray<P2PDiscoveredPeerInfo>;
    request(packet: P2PRequestPacket): Promise<P2PResponsePacket>;
    send(message: P2PMessagePacket): void;
    requestFromPeer(packet: P2PRequestPacket, peerId: string): Promise<P2PResponsePacket>;
    sendToPeer(message: P2PMessagePacket, peerId: string): void;
    private _disconnectSocketDueToFailedHandshake;
    private _startPeerServer;
    private _stopHTTPServer;
    private _stopWSServer;
    private _stopPeerServer;
    private _startPopulator;
    private _stopPopulator;
    private _isNetworkReady;
    private _pickRandomPeers;
    private _handleGetPeersRequest;
    private _isTrustedPeer;
    start(): Promise<void>;
    stop(): Promise<void>;
    private _bindHandlersToPeerPool;
}
