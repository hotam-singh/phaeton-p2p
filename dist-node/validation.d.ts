import { P2PCompatibilityCheckReturnType, P2PDiscoveredPeerInfo, P2PNodeInfo, P2PPeerInfo, PeerLists, ProtocolMessagePacket, ProtocolPeerInfo, ProtocolRPCRequestPacket } from './p2p_types';
export declare const getByteSize: (object: any) => number;
export declare const validatePeerAddress: (ip: string, wsPort: number) => boolean;
export declare const incomingPeerInfoSanitization: (peerInfo: ProtocolPeerInfo) => P2PPeerInfo;
export declare const outgoingPeerInfoSanitization: (peerInfo: P2PPeerInfo) => ProtocolPeerInfo;
export declare const validatePeerInfoSchema: (rawPeerInfo: unknown) => P2PPeerInfo;
export declare const validatePeerInfo: (rawPeerInfo: unknown, maxByteSize: number) => P2PPeerInfo;
export declare const validatePeersInfoList: (rawBasicPeerInfoList: unknown, maxPeerInfoListLength: number, maxPeerInfoByteSize: number) => ReadonlyArray<P2PPeerInfo>;
export declare const validateRPCRequest: (request: unknown) => ProtocolRPCRequestPacket;
export declare const validateProtocolMessage: (message: unknown) => ProtocolMessagePacket;
export declare const checkNetworkCompatibility: (peerInfo: P2PDiscoveredPeerInfo, nodeInfo: P2PNodeInfo) => boolean;
export declare const checkProtocolVersionCompatibility: (peerInfo: P2PDiscoveredPeerInfo, nodeInfo: P2PNodeInfo) => boolean;
export declare const checkPeerCompatibility: (peerInfo: P2PDiscoveredPeerInfo, nodeInfo: P2PNodeInfo) => P2PCompatibilityCheckReturnType;
export declare const sanitizePeerLists: (lists: PeerLists, nodeInfo: P2PPeerInfo) => PeerLists;
